[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "photoflow"
version = "0.1.0"
description = "Python batch photo or image manipulation"
authors = [{name = "Travis Silvers", email = "travis@example.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
keywords = ["image", "batch", "photo", "manipulation", "processing"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "Pillow>=10.0.0",
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
gui = [
    "dearpygui>=1.10.0",
]
ai = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "transformers>=4.30.0",
]
cloud = [
    "boto3>=1.28.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.17.0",
]
metadata = [
    "piexif>=1.1.3",
    "iptcinfo3>=2.1.4",
]
advanced = [
    "numpy>=1.20.0",
]

[project.scripts]
photoflow = "photoflow.cli:main"

[project.urls]
Homepage = "https://github.com/firestrand/photoflow"
Repository = "https://github.com/firestrand/photoflow"
Issues = "https://github.com/firestrand/photoflow/issues"

[tool.hatch.build.targets.wheel]
packages = ["photoflow"]

[tool.pytest.ini_options]
testpaths = ["tests", "photoflow"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=photoflow",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=50",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
]

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | dev-doc
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 120
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "dev-doc",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "SIM117",  # multiple-with-statements (style preference)
    "PLC0415", # import should be at top-level (needed for testing import paths)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG001", "ARG002", "S101", "PLR2004", "RUF100"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "dev-doc/",
    "build/",
    "dist/",
    "tests/",
]

[tool.coverage.run]
source = ["photoflow"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/test_*.py",
    "*/*_test.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "piexif.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "iptcinfo3.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "rich.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "numpy.*"
ignore_missing_imports = true
